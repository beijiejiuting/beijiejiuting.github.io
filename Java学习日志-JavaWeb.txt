架构: C/S B/S
InetAddress:获取对象:InetAddress.getByName("")   .getHostName .getHostAddress
UDP:new DatagramSocket(随机/指定端口) DatagramPackage(bytes[],length,ip,port)  
	发送:new DS,new DP,ds.send(dp) ds.close()
	接受:new DS,new DP,ds.receive(dp),dp.get/Data/Length/Address/Port(),ds.close()
	单播	组播:接收端MuticastSocket,ms.joinGroup(组播地址)	广播
TCP:客户端 Socket(host,port) socket.getOutputStream() os.write() os.close s.socket.close
       服务器 ServerSocket(port) socket=ss.accept() socket.getInputStream() is.close s.socket.close
       结束输入流:socket.shutdownOutput 此时客户端的输入流的read()接收到-1
UUID.randomUUID()
 




  

URL:协议://主机:端口号/路径?查询参数



SpringBoot骨架(网页/IDEA)
@Controller/@Service修饰class,自动创建(控制器对象只有一个)
@RequestMapping("/路径")
@ResponseBody修饰方法(@Responsebody+@Controller)
 

控制器处理请求时,自动创建JavaBean

HTTP:基于TCP,基于请求-响应模型,无状态
        请求:请求行:GET/POST(请求方式) /src(资源路径) HTTP/x.x(协议)
               请求头:Host:请求的主机  User-Agent:浏览器版本 Accept: */*接受资源类型 Accept-Language/Encoding Content-Type/Length
               请求体(POST):
        响应:响应行:HTTP/x.x(协议) 状态码 描述
	状态码:1xx响应中,2xx成功,3xx重定向,4xx客户端错误,5xx服务器错误
               响应头:Content-Type/Length/Encoding Cache-Control Set-Cookie
               响应体(POST):
        解析:使用Tomcat(springboot内嵌)
DispatcherServlet(前段控制器):HttpServletRequest/Response

接收参数:简单参数(名字对应参数)/实体参数(名字对应对象的属性)/数组集合参数(1,发送多个同名2,用数组/@RequestParam集合接收)/日期参数@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") LocalDateTime/JSON参数@RequestBody 对象接收/路径参数@RequestMapping(/xx/{id}/{name})参数前@PathVariable
返回值:RUSULT设计模式,统一响应结果

三层架构:Controller->Service->Dao(Data Access Object)
解耦:IOC&DI
	控制反转IOC:@Component对象创建权转移给Spring的容器
		@Component->{@Controller,@Service,@Repository}(value="") 
		扫描到的注解才能生效,默认扫描当前包以及子包
	依赖注入DI:@Autowired容器提供程序需要的资源(默认按照类型注入)
		@Primary@(Component)优先注入
		@Qualifier("")@Autowired按value注入 
		@Resource(name="")按value注入 (provided by JDK)

MySQL:
           SQL语句:DDL/DML/DQL/DCL
	DDL:(数据库定义)show databases;/create database dbname;/use dbname/select database()/drop database dbname
	DDL:(表操作)create table tbname(字段 类型 [约束not null/unique/primary key(auto_increment) /default/foreign key] [注释],);
	DML:(数据库操作)insert into tbname(字段) values (""),("")/update tbname set  x1=v1,x2=v2 where /delete from dbname where  
	DQL: select (聚合) from where (groupby having) orderby limit
	        select distinct/a (as) b
	        where is (not) null/between and/in ()/lik e '_ %'
	        聚合函数:count(*),min(),max(),avg(),sum()
	        分组:group by分组 having分组后的过滤条件(可以使用聚合函数) select 分组,聚合
	        排序:order by 字段 ASC/DESC,
	        分页:limit 起始索引,长度
	多表设计:foreign key
		一对多:在多的一方添加外键关联一的一方的主键
		一对一:任意一方，添加外键(unique)，关联另外一方的主键。
		多对多使用中间表两个外键分别关联两方的主键
	多表查询:内连接(AB交集):显式:from A [inner] join B on 隐式: from tb1,tb2 where(表可以起别名)
	              外连接(A/B+交集):显式:from A left/right [outer] join B on 
	              子查询(嵌套):标量/列/行/表