2024.4.1
学习一些基础 IDEA的使用,Debug,注释中的TODO
2024.4.2
Scanner(System.in)
2024.4.3
循环标号和break
API 
String 遍历:toCharArray,charAt 截取:substring 替换:replace,repalceAll(regex,newstr) 拆分:split
StringBuilder:append,reverse,length,toString
StringBuffer:线程安全
2024.4.4
集合(ArrayList):add(index,element),get,set,size,remove(index/obejct)
static和工具类,权限,extends
final
abstract
interface的多extends implements多态
2024.4.5
接口新特性 JDK8:允许接口内部default,static方法 JDK9:允许接口内部private方法
方法外代码块
内部类 Lambda
2024.4.5
基本界面
石头迷阵小游戏
2024.4.6
Object类:重写toString,equals
Math类(static):abs,ceil,floor,round,max,pow,random[0,1)
System类(static):exit,currentTimeMillis,arraycopy
BigDecimal类:构造(double(不精确)/string)/BigDecimal.valueOf(double)  add,subtract,multiply,devide
包装类(Integer):构造/Integer.valueOf()  intValue()      static方法:toBinary/Octal/HexString,parseInt 
有cache(-128~127)
2024.4.7
Arrays(static):toSting,equals,binarySearch,sort
正则表达式:[]单个,^取反        X? 0/1次 X* 任意次 X+ 大于0次 X{n}n次 X{n,}大于等于n次 X{n,m}n~m次
通配符: '.' 任意 '\d'数字 '\s' 空白 '\w'字母数字下划线  
Pattern类:获取(static):Pattern.compile(regex)
Matcher类:获取pattern.matcher(data) 查找下一个find 获取group(index,0为全部,1开始,regex每个括号是一个组)
时间API
Java8-:	Date:构造(  /long),getTime,setTime
	SimpleDateFormat(线程不安全):构造:( /String)yyyy年MM月dd日 HH:mm:ss	parse,format
	Calendar:创建 Calendar.getInstance(),  get,set,add,SetTime(Date),getTime
Java8+:     (线程安全,不修改对象本身,返回新对象)
	LocalTimeDate:构造(static):now/of()  toLocalDate/Time get***(可以再.getValue()获取int)
	                       with/plus/minus***
		       equals,isBefore,isAfter	 
		       parse(string,formatter)
	DateTimeFormatter:构造(static):ofPattern("yyyy年MM月dd日 HH:mm:ss")   
		               format 
	Instant:构造(static):now/of***(),atZone(ZoneId),isBefore,isAfter,plus/minus***
	ZoneDateTime:构造(static):now/of(),with/plus/minus***
	ZoneId(static):getAvailableZoneIds,systemDefault,of  

	Peroid:构造(static)between(date1,date2) get***( )	
	Duration:构造(static)between(datetime1,datetine2) to***()
	ChronoUnit(static):ChronoUnit.YEARS/***.between(datetime1,datetine2)
Exception try{}catch(Exception){}finally{}        	throws Exception1,Exception2
	throw new Exception("!"),e.printStackTrace(),e.getMessage()
	子类方法不能throw父类没有的Exception
Collection add,clear,isEmpty,size	remove,contains(重写equals)
	遍历:迭代器:获取c.iterator(),迭代it.next(),仍有hasNext()
	       增强for  for( i : c){}
	       foreach(匿名内部类)
List接口:	add,remove,set,get 
	遍历:迭代器 普通for 增强for foreach 
	       ListIterator previous,haPrevious,add,remove
ArrayList:初始0,add()10,超出扩容1.5倍
LinkedList: add/get/removeFirst/Last
2024.4.8
泛型(将运行时错误提升到编译期)
泛型类:成员变量,方法返回值/参数
泛型方法:参数 static<T>
泛型接口:方法返回值/参数 实现时可以指定类型,也可以继续声明泛型
泛型通配符: <?>任意类型 
泛型限定:<? extends F>F或F子类 <? super S>S或S父类
AVL树
红黑树
2024.4.9
HashSet(哈希表,去重)重写equals(),hashCode() 
	Java8-:容量16,头插 
	Java8(内部创建HashMap):初始容量16,加载因子0.75,哈希扰动(右移16位),二次哈希(异或原哈希值)
	元素超过容量*加载因子时,数组扩容2倍
	链表挂超过8个,数组没超过64,数组扩容2倍
	链表挂超过8个,数组长度到达64,链表转红黑树,
TreeSet(红黑树,排序,去重) add元素需要实现Comparable,重写compareTo(),返回值0相同,1大/右/正序,-1小/左/ 倒序
		      比较器(优先):创建TreeSet时,传入一个Comparator(内部类),重写compare(o1,o2)o1-o2正序					
LinkedHashSet(哈希表+双向链表,存取有序,去重 )
Collections工具类 addAll,shuffle,binarySearch,swap    sort,max,min元素需要实现Comparable,重写compareTo()
可变参数(int... nums)(0~n个)参数接收到nums数组里
Map接口 put(key若相同,value覆盖),remove,clear,containsKey/Value,isEmpty,size
	遍历: keySet(获取所有key) get(key) 
	        entrySet(获取所有键值对),遍历entrySet getKey/Value
	        foreach(匿名内部类)
2024.4.10
Stream类:三种获取(数组,列表,零散元素),中间方法(filter,limit,skip,distinct,concat),终结方法(forEach,count)
collect:   stream.collect(Collectors.toList/Set/Map(new Function<old,new>(){},new Function<old,new>(){}))
File类,:构造,判断(isFile,isDirectory,exist),获取(length,getAbsolutePath,getPath,getName,lastModified),创建(createNewFile,mkdir,mkdirs),删除(delete),遍历(listFiles)
2024.4.11
IO流
字节流:In/OutputStream ->FileIn/OutputStream 构造参数为文件路径String/File
	FileInputStream:read(/byte[])末尾返回-1
	FileOutputStream(不存在自动创建,默认重写,true追加):write(int/byte[],string.getBytes)
	close(关流):try(需要close的对象,实现AutoCloseable,重写close ){IO}catch(Exception e){}
字节缓冲流BufferedIn/Outputstream(In/Outputstream) 内置数组长度8192 
2024.4.12
	字符转字节 string.getBytes( /charSetName) 字节转字符 String(byte[],charSetName)
字符流Reader,Writer ->FileReader/Writer 构造参数为文件路径String/File 
	FileReader: read( /char[])末尾返回-1 内置数组长度8192 
	FileWriter(不存在自动创建,默认重写,true追加):write(int/char[]/String)内置数组长度1024 不关流不写,flush(刷出数据) 
字符缓冲流BufferedReader/Writer(Reader/Writer) 内置数组长度8192 
	BufferedReader:read,readLine()末尾返回null,忽略\n
	BufferedWriter:write,newLine()写出换行
转换流(按指定字符编码读写/字节流转字符流):In/OutputStreamReader/Writer(In/OutputStream,charSetName) read/write
序列化流:构造ObjectIn/OutputStream(In/OutputStream)
	ObjectOutputStream():序列化 writeObject(o) o要实现serializable接口(自动生成serialVersionUID,推荐手动写)
	ObjectInputStream():反序列化 o=readObject()
	transient关键字(修饰成员变量,不被序列化)
打印流:PrintStream (extends FileOutputStream)构造(OutputStream/File/String,charSetName)
	write(写出一个字节),print(),println()
          PrintWriter  (extends Writer)构造(OutputStream/File/String,boolean,charSetName)
Properties:(extends HashTable )set/getProperties stringPropertyN ames()返回keySet(用来遍历)
	IO:  load(InputStream/Reader)    store(OutputStream/Writer,string)
2024.4.13
Commons/hutool
2024.4.14
多线程: 
1:extends Thread,重写run(),new对象.start()
2:implements Runnable,重写run(),new对象,new Thread(o) t.start()
3:implements Callabel,重写call(),new对象,new FutureTask(o),newThread(ft),t.start(),ft.get()
get/setName()    Thread.currentThread(static)sleep(static)    set/getPriority    setDaemon()守护    Thread.yield()礼让    t.join()插入到当前线程之前
线程状态:新建NEW->就绪RUNNABLE->运行->(阻塞BLCOKED)/(WAITING/TIMED_WAITING)->死亡TERMINATED
同步:同步代码块:synchronized(o){}各个线程使用同一把锁才能实现 o=.class()字节码只加载一次
       同步方法:synchronized关键字放在方法返回值之前 非static方法的锁对象this / static方法的锁对象是字节码
       锁: new ReentrantLock(), lock.lock() lock.unlock()
2024.4.15
等待唤醒机制:thread:wait()    lock:notify(),notifyAll()
	阻塞队列: Array/LinkedBlockingQueue  .put()  .take()  自动加锁 
线程池:ExecutorService p= new Executors.newFixed/CachedThreadPool(n)    方法:p.submit(Runnable/Callable) p.shutdown
	自定义线程池:1:核心线程满,等待队列满,才开临时线程 2:拒绝策略:Abort(default)/Discard/DiscardOldest/CallerRuns
	ThreadPoolExecutor p=new TPE(核心线程,最大线程,空闲线程最大存活时间,TimeUnit,BlockingQueue,ThreadFactory,Policy)
	线程池推荐大小:
		CPU密集型运算:最大并行数+1; I/O密集型运算:最大并行数*期望CPU利用率*(cal_time+wait_time)/cal_time
2024.4.17
反射:
	获取class对象:Class.forName(全类名)  类名.calss  对象.getClass()
	获取Constructor:get(Declared)Constructor(s)(),Declared全部,无Declared公共,无s传参数(参数类型.class)
		con.getModifiers/Parameters()  con.newInstance()  con.setAccessible()
	获取成员变量:get(Declared)Field(s)(),Declared全部,无Declared公共,无s传参数(变量名)
		f.getModifiers/Name/Type() f.get/set(o)获取o的成员变量的值  f.setAccessible()
	获取成员方法:get(Declared)Method(s)(),Declared全部(无父类),无Declared公共(含父类),无s传参数(方法名,参数类型.class)
		m.getModifiers/Name/Parameters/ExceptionTypes()  m.setAccessible()
		调用成员方法:new对象 m.invoke(o,参数)
代理:原类都要实现一个接口,接口中是要被代理的方法
	写代理工具类:写获得代理对象方法(static),返回代理对象,参数为原类对象(被代理对象)
		return (强转接口类型)Proxy.newProxyInstance(类加载器,接口数组,代理方法)
			类加载器:代理工具类.class.getClassLoader()
			接口数组: new Class[]{接口.class}	
			代理方法(接口类型):实现方法invoke(代理对象,method,参数)---此处与下方调用对应---
					{代理的操作+return method.invoke(原类对象,参数)调用原类方法()}
	获取代理对象:代理工具类调用获得代理对象方法
	通过代理对象调用代理方法:代理对象.method(参数)---此处与invoke处对应---
完结于2024.4.17